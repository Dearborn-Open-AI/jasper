/*!

\page init__page Initialization and Shutdown

\tableofcontents

\section init_overview Configuration, Initialization, and Shutdown

There are two stages in the setup of the JasPer library at run time:

  1. configuration; and
  2. initialization.

The configuration stage initializes the current configuration settings
for the library.
The configuration settings are initialized to their default values
using the `jas_conf_clear()` function
(where these default values are fixed at the time that the library is built).
The initialization stage initializes the library using the current
configuration settings.
The `jas_initialize()` function performs initialization (not configuration).
The library must be both configured and initialized (in that order)
before most code in the library can be used.
For backward compatibility with older versions of the
library, the `jas_init()` function performs both configuration and initialization
of the library.
(The `jas_init()` function internally calls `jas_conf_clear()` to initialize the
configuration settings with their default values before proceeding to
initialize the library.)
The library is cleaned up (i.e., shutdown) by invoking the `jas_cleanup()`
function.
The library cannot be re-initialized.
That is, calling `jas_init()` or `jas_initialize()` without an intervening
call to `jas_cleanup()` is not allowed.

No code in the library can be invoked prior to initialization of the
library (via `jas_init()` or `jas_initialize()`), with the exception
of the functions identified below.

Only the following functions may be called before the JasPer library is
configured (via `jas_conf_clear()`):

`jas_std_allocator_init()`

The following functions may be called after the JasPer library is
configured (via `jas_conf_clear()`) but before it is initialized
(via `jas_init()` or `jas_initialize()`):

- the \c jas_conf_* family of functions, including functions such as:

  - `jas_conf_clear()`
  - `jas_conf_set_allocator()`
  - `jas_conf_set_allocator_wrapper()`
  - `jas_conf_set_debug_level()`
  - `jas_conf_set_mem_limit()`
  - `jas_conf_set_dec_default_max_samples()`

\section init__state Library State

The JasPer library has the notion of a context.
A context is used to store certain state used by the library.
There can be multiple contexts in use at any given time.
From the library user's point of view, a context is specified using an opaque
handle (e.g., a void pointer).
The type of this handle is `jas_context_t`.
A handle with the special value of 0 does not correspond to a valid context.
It is analogous to a null pointer.

The JasPer library allows the current context to be set independently
for each thread.
That is, the current context is a per-thread setting.
When the library is initialized, a single context is automatically
created, which is referred to as the default context.
If the current context for a thread is set to the special value of 0,
the thread's current context becomes the default context.
A given context cannot be shared by more than one thread, as this would
lead to data races and other synchronization problems.
For this reason, of the threads that are using the JasPer library,
at most one thread may use the default context.
In an application that has multiple threads using the JasPer library,
it is recommended that no thread use the default context
(i.e., each thread should create and use its own context).
If only one thread needs to use the JasPer library (such as in the case
of a single-threaded application), that thread can simply use the
default context, eliminating the need to create additional contexts.

The JasPer library has two types of state:

  1. Global state.
     That is, state that is library wide.
  2. Per-context state.
     That is, state that only applies to a particular context.

Most state maintained by the library is in the form of per-context state.
This is motivated by the desire to minimize the sharing of state between
threads, which would require locking/synchronization.
The global state for the library includes:

  - the memory allocator to be used by the library
  - the maximum amount of memory that the library is permitted to use

The per-context state includes:

  - the debug level
  - the veprintf function to be used for logging error/warning/informational
    messages
  - the image format table
  - the maximum number of samples in an image that a decoder is allowed to
    process

\section init_setup_example_1 Example of Code for Library Setup

Setup of the library would typically be performed using code resembling
the following:

~~~~~~~~~~
/*
Configure the library using the default configuration settings.
*/
jas_conf_clear();

/*
Change any configuration parameters for which defaults are not suitable
by using the jas_conf_* family of functions.
An example of this type of code follows.
*/

static jas_std_allocator_t allocator;
jas_std_allocator_init(&allocator);
jas_conf_set_allocator(JAS_CAST(std_allocator_t *, &allocator));
jas_conf_set_max_mem(10000000);

/*
Initialize the JasPer library.
*/
if (jas_initialize()) {
	/* Handle the initialization error. */
}

/*
Use the library.
In the case that the library is only used in a single thread, there
is no need to explicitly create any contexts, as the default context can
safely be used.
*/

/* Clean up the library. */
jas_cleanup();
~~~~~~~~~~

In the case of an application in which the JasPer library is used in more than
one thread, each thread would typically establish its own context before
starting to use the library.
For each thread, the code for this might resemble something like the following:

~~~~~~~~~~
/* Create a new context. */
jas_context_t context;
if (!(context = jas_create_context())) {
	/* Handle the error. */
}
/* Set the context for the calling thread to this new context. */
jas_set_context(context);
~~~~~~~~~~

The cleanup of the context might resemble like the following:

~~~~~~~~~~
/* Stop using the context before it is destroyed. */
jas_set_context(0);
/* Destroy the context. */
jas_context_destroy(context);
~~~~~~~~~~

\section init_setup_example_2 Example of Code for Library Setup (jas_init)

Alternatively, the setup of the library can be performed using code resembling
the following, if the library configuration parameters do not need to be
changed from their defaults:

~~~~~~~~~~
if (jas_init()) {
	/* handle initialization error */
}

/* Use the library. */

/* Clean up the library. */
jas_cleanup();
~~~~~~~~~~

Contexts can also be created and used when the library is initialized
with `jas_init()` (just like in the case of `jas_initialize()`).

\section init_setup_example_3 Additional Examples of Library Setup

Some additional examples of using the `jas_conf_clear()`, `jas_initialize()`,
and `jas_init()` functions can be found in the source code for the application
programs `jasper`, `imginfo`, and `imgcmp`.
Moreover, the application program `multithread` is an example of a
program that uses the JasPer library in multiple threads.

\section init_allocators Memory Allocators and the Allocator Wrapper

The library provides a simple interface for memory allocators.
This is provided through the `jas_allocator_t` type.
An allocator object resides in memory managed by the library user.
If the library user invokes `jas_cleanup()` via `atexit()`, then
the allocator should obviously not be allocated on the stack.
(The `jas_cleanup()` function will use the allocator in order
to free memory previously allocated by the library.)

The `jas_std_allocator_init()` function provides a way to create
an allocator that uses `malloc()` and related functions from the
C standard library.

Normally, the JasPer library does not directly use the allocator
provided by the library user.  It instead uses this allocator
indirectly through a wrapper.
The allocator wrapper is a pseudo-allocator.  That is, it
does not actually allocate memory directly but rather delegates
the memory allocation operations to another allocator (namely,
the one specified by the library user).
The allocator wrapper tracks the amount of memory used by the
allocator to which it delegates.
This eliminates the need for the library user's allocator to track
this information itself.

As long as the allocator wrapper functionality is enabled, the
JasPer library will track how much memory is being used by
the allocator in order to allow a limit to be imposed on
memory usage.
The allocator wrapper composes with the allocator selected by
the library user, as explained above.
So, this memory limiting functionality is available even when the
library user provides a custom allocator that does not itself
track memory usage.

Although `jas_malloc()`, `jas_realloc(), `jas_free() and other related
functions internally use the allocator provided
by the library user for all memory allocations, this does not imply that
pointers returned by `jas_malloc()` (and related functions) can be used
with the library user's allocator directly.

*/
