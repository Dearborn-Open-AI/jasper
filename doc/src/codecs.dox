/*!

\page codecs Codecs

The JasPer software provides implementations of several popular codecs.
The sections that follow describe the various codecs in more detail.

\section codecs__common Common Codec Functionality

Some encoder and decoder options are common to most/all codecs.
Typically, encoders and decoders tend to ignore unrecognized options
(although a warning might be issued for such options).
So, it is not normally problematic to specify an option that is not
supported to an encoder or decoder.

\subsection codecs__common__enc_options Common Encoder Options

There are no common options supported by all encoders.

\subsection codecs__common__dec_options Common Decoder Options

Except where explictly noted otherwise, all decoders support the
following options:

  - `max_samples=$n`.
    Set the maximum number of samples that are permitted
    in an image to be decoded to `$n`.
    (An 100\f$\times\f$100 RGB-color image has 30000 samples.)

\section codecs__bmp BMP Codec

One of the most popular image formats on the Microsoft Windows platform
is Microsoft's BMP format.  The BMP codec in JasPer was written without
the benefit of the BMP format specification from Microsoft.  This means
that the BMP support will inevitably not work correctly for all valid
BMP files.

\subsection codecs__bmp__enc_options Encoder Options

The encoder does not support any special options.

\subsection codecs__bmp__dec_options Decoder Options

The decoder does not support any options beyond the common ones.

\section codecs__heic HEIC Codec

The HEIC format is quite popular on Apple platforms.
The support is experimental and likely has numerous bugs.

\subsection codecs__heic__enc_options Encoder Options

Encoding is not currently supported.

\subsection codecs__heic__dec_options Decoder Options

In addition to the common decoder options, the decoder supports the
following options:

  - `version`

\section codecs__jp2 JP2 Codec

One of the two image formats specified in the JPEG-2000 Part-1 standard
(i.e., ISO/IEC 15444-1 \cite iso15444p1) is the so called "JP2" format.

\subsection codecs__jp2__enc_options Encoder Options

The encoder supports all of the same options as the JPC encoder.

\subsection codecs__jp2__dec_options Decoder Options

The decoder supports all of the same options as the JPC decoder.

\section codecs__jpc JPC Codec

One of the two image formats specified in the JPEG-2000 Part-1 standard
(i.e., ISO/IEC 15444-1 \cite iso15444p1) is the so called JPEG-2000 code
stream format.
The JPC codec in JasPer implements this format.

The design of the JPEG-2000 codec implementation was driven
by several key concerns: execution speed, memory usage, robustness,
portability, modularity, maintainability, and extensibility.  In some
cases, however, during the design process, modularity, portability, and
understandability of the code were weighed more heavily than execution
speed and memory usage.  Code understandability and portability
were critical considerations since this software was intended to be
used as a reference implementation of the JPEG-2000 Part-1 codec
in the JPEG-2000 Part-5 standard \cite iso15444p5.

Since the JPEG-2000 standard does not specify any means for encoding
color space information in a JPEG-2000 code stream, the decoder must
make certain assumptions about the color space of an image.  If accurate
color representation is important, the JPEG-2000 code stream format should
not be employed.  The JPEG-2000 JP2 format should be used instead.

\subsection codecs__jpc__enc_options Encoder Options

In addition to the common encoder options, the JPC encoder supports
the following options:

  - `imgareatlx=$x`.
    Set the x-coordinate of the top-left corner of the image area to `$x`.

  - `imgareatly=$y`.
    Set the y-coordinate of the top-left corner of the image area to `$y`.

  - `tilegrdtlx=$x`.
    Set the x-coordinate of the top-left corner of the tiling grid to `$x`.

  - `tilegrdtly=$y`.
    Set the y-coordinate of the top-left corner of the tiling grid to `$y`.

  - `tilewidth=$w`.
    Set the nominal tile width to `$w`.

  - `tileheight=$h`.
    Set the nominal tile height to `$h`.

  - `prcwidth=$w`.
    Set the precinct width to `$w`.
    The argument `$w` must be an integer power of two.
    The default value is 32768.

  - `prcheight=$h`.
    Set the precinct height to `$h`.
    The argument `$h` must be an integer power of two.
    The default value is 32768.

  - `cblkwidth=$w`.
    Set the nominal code block width to `$w`.
    The argument `$w` must be an integer power of two.
    The default value is 64.

  - `cblkheight=$h`.
    Set the nominal code block height to `$h`.
    The argument `$h` must be an integer power of two.
    The default value is 64.

  - `mode=$m`.
    Set the coding mode to `$m`.
    The argument `$m` must have one of the following values:

      - `int`. integer mode
      - `real`. real mode

    If lossless coding is desired, the integer mode must be used.
    By default, the integer mode is employed.
    The choice of mode also determines which multicomponent and wavelet
    transforms (if any) are employed.

  - `rate=$r`.
    Specify the target rate.
    The argument `$r` is a positive real number.
    Since a rate of one corresponds to no compression, one should never need
    to explicitly specify a rate greater than one.
    By default, the target rate is considered to be infinite.

  - `ilyrrates=`\f$r_0\f$[,\f$r_1\f$,\f$\ldots\f$,\f$r_{N-1}\f$].
    Specify the rates for any intermediate layers.
    The argument to this option is a comma separated list of \f$N\f$ rates.
    Each rate is a positive real number.
    The rates must increase monotonically.
    The last rate in the list should be less than or equal to the
    overall rate (as specified with the `rate` option).

  - `prg=$p`.
    Set the progression order to `$p`.
    The argument `$p` must have one of the following values:

      - `lrcp`. layer-resolution-component-position (LRCP) progressive
        (i.e., rate scalable)
      - `rlcp`. resolution-layer-component-position (RLCP) progressive
       (i.e., resolution scalable)
      - `rpcl`. resolution-position-component-layer (RPCL) progressive
      - `pcrl`. position-component-resolution-layer (PCRL) progressive
      - `cprl`. component-position-resolution-layer (CPRL) progressive

    By default, LRCP progressive ordering is employed.
    Note that the RPCL and PCRL progressions are not valid for all possible
    image geometries.  (See \cite iso15444p1 for more details.)

  - `nomct`.
    Disallow the use of any multicomponent transform.

  - `numrlvls=$n`.
    Set the number of resolution levels to `$n`.
    The argument `$n` must be an integer that is greater than or equal to one.
    The default value is 6.

  - `sop`.
    Generate SOP marker segments.

  - `eph`.
    Generate EPH marker segments.

  - `lazy`.
    Enable lazy coding mode (a.k.a. arithmetic coding bypass).

  - `termall`.
    Terminate all coding passes.

  - `segsym`.
    Use segmentation symbols.

  - `vcausal`.
    Use vertically stripe causal contexts.

  - `pterm`.
    Use predictable termination.

  - `resetprob`.
    Reset the probability models after each coding pass.

  - `numgbits=$n`.
    Set the number of guard bits to `$n`.

\subsection codecs__jpc__dec_options Decoder Options

The decoder does not support any special options.

\subsection codecs__jpc__rate_specification Rate Specification

All rates are specified in terms of compression factors (i.e.,
as reciprocals of compression ratio) and not as actual bit rates!
Although image coding folks frequently use the number of bits per pixel
to specify rate, this quantity is often inconvenient to use when dealing
with images that have differing sample precisions.  Furthermore, the
number of bits per pixel is not well defined for multicomponent images
with distinct subsampling factors.  The compression factor, however, is
independent of sample precision and well defined for all types of images.
For these reasons, JasPer uses the compression factor and not the
number of bits per pixel to specify rates.

\section codecs__jpg JPG Codec

For lossy coding, one of the most popular image formats is specified in
the JPEG standard (i.e., ISO/IEC 10918-1 \cite iso10918p1).  In JasPer,
the JPG codec implements this format.

The JPEG support in JasPer requires the JPEG library from the Independent
JPEG Group (IJG).  For legal reasons, the IJG JPEG library source code
is not included with JasPer.  The source code for this library can be
downloaded from the IJG web site (i.e., http://www.ijg.org).

\subsection codecs__jpg__enc_options Encoder Options

The following options are supported by the encoder:

  - `quality=$q`.
    Set the quality factor to `$q`.
    This is used in order to indirectly control the bit rate for lossy coding.

\subsection codecs__jpg_dec_options Decoder Options

The decoder does not support any special options.

\section codecs__pgx PGX Codec

The JPEG-2000 Verification Model software employs a non-standard format
called PGX.  In JasPer, this format is handled by the PGX codec.
The PGX format can only handle single components images, and consequently,
is of limited use.

\subsection codecs__pgx__enc_options Encoder Options

The encoder does not support any special options.

\subsection codecs__pgx__dec_options Decoder Options

The decoder does not support any special options.

\section codecs__mif MIF Codec

The MIF format is not a standard format.  This format
was invented solely for the purpose of testing the JasPer software.
The support for the MIF format is experimental.
It is intended to be used for advanced testing of the JasPer JPEG-2000
codec implementation.

\subsection codecs__mif__enc_options Encoder Options

The encoder does not support any special options.

\subsection codecs__mif__dec_options Decoder Options

The decoder does not support any special options.

\section codecs__pnm PNM Codec

On UNIX platforms, the Portable Pixmap/Graymap/Bitmap (PNM)
format is quite popular for coding image data.  The PNM codec in JasPer
supports this format.
In JasPer, the support for the PNM/PGM/PPM format is complete.  Therefore,
the use of this format is favored over the BMP format.  A (nonstandard)
extension has also been added to the support for the PNM format so that
it can handle images with signed sample values.

\subsection codecs__pnm__enc_options Encoder Options

The following options are provided by the PNM encoder:

  - `text`.
    Use a non-raw (i.e., non-binary) flavor of PNM format.

\subsection codecs__pnm__dec_options Decoder Options

The decoder does not support any special options.

\section codecs__ras RAS Codec

One popular image format on Sun workstations is the Sun Rasterfile format.
The RAS codec in JasPer implements this format.

\subsection codecs__ras__enc__options Encoder Options

The encoder does not support any special options.

\subsection codecs__ras__dec_options Decoder Options

The decoder does not support any special options.

*/
